priority -50

#################
# python script #
#################

snippet #! "#!/usr/bin/env python3" b
#!/usr/bin/env python3
$0
endsnippet

snippet script "complete python script with shebang and main function" b
#!/usr/bin/env python
"""
${1:${VISUAL:TODO module docs}}
"""

def main():
	pass

if __name__ == "__main__":
    main()
endsnippet

######################
# Assertions & Tests #
######################

snippet ae "Assert equal" b
self.assertEqual(${1:${VISUAL:first}}, ${2:second})
endsnippet

snippet at "Assert True" b
self.assertTrue(${1:${VISUAL:expression}})
endsnippet

snippet af "Assert False" b
self.assertFalse(${1:${VISUAL:expression}})
endsnippet

snippet an "Assert is None" b
self.assertIsNone(${1:${VISUAL:expression}})
endsnippet

snippet ann "Assert is not None" b
self.assertIsNotNone(${1:${VISUAL:expression}})
endsnippet

snippet classtd "django test class" b
from django.test import TestCase

class Test${1:Class}(TestCase):
	def test_${2:name}(self):
		${3:${VISUAL:pass}}

endsnippet

snippet classtdg "django graphql test class" b
from oneview.tests.graphql import GraphqlTestCase

class Test${1:Class}(GraphqlTestCase):
	def test_${2:name}(self):
		${3:${VISUAL:pass}}

endsnippet

snippet classt "python unittest test class" b
from unittest import TestCase

class Test${1:Class}(TestCase):
    def test_${2:name}(self):
		${3:${VISUAL:pass}}

endsnippet

snippet subtest "python unittest subtest" b
for a, b in (("foo", "bar"), ("baz", "bazz")):
	with self.subTest(a=a, b=b):
		self.assertEqual(...)
endsnippet


snippet def "function"
def ${1:name}():
	pass

endsnippet

snippet deft "function"
def test_${1:name}():
	pass

endsnippet

#################
# Documentation #
#################

snippet " "triple quoted string (double quotes)" b
"""
${1:${VISUAL:TODO}}
""
endsnippet

snippet doc "triple quoted string (double quotes)" b
"""
${1:${VISUAL:TODO describe what does this function do in a high level}}

:param TODO: 

:return: TODO 
"""
endsnippet

#########
# Print #
#########

snippet "([\w.]*).F" "print variable with f string = in color cyan" r
`!p snip.rv = 'f"\\033[36m{' +  match.group(1) + '=}\\033[0m"'`
endsnippet

snippet '([\w.]*).~' "print with padding ~~~" r
`!p snip.rv = f" {match.group(1)} ".center(60, "~")`
endsnippet

###############
# tmp snippet #
###############

snippet ia "from typing import Any" b
from typing import Any
endsnippet

snippet io "from typing import Optional" b
from typing import Optional
endsnippet

snippet id "from typing import Dict" b
from typing import Dict
endsnippet

snippet il "from typing import List" b
from typing import List
endsnippet

###########
# Logging #
###########

snippet logger "from typing import List" b
import logging

_logger = logging.getLogger(__name__)
endsnippet

############
# graphene #
############

snippet graphene_mutation_test "graphene_mutation_test" b
query = """
	mutation fooBar(
		$todoTodo: ID!,
		$todoTodo: Decimal!,
	) {
		todoTodo(
			todoTodo: $todoTodo,
			todoTodo: $todoTodo,
		) {
			ok
			errors
		}
	}
"""

variables = {
	"todoTodo": "todo",
	"todoTodo": "todo",
}

response = self.schema.execute(
	query,
	variables=variables,
	context_value=self.context_value,
)
endsnippet

snippet graphene_query_test "graphene_mutation_test" b
query = """
	query todoTODO(
		$todoTODO: ID!,
	) {
		todoTODO(
			todoTODO: $todoTODO,
		) {
			ok
			errors
		}
	}
"""

variables = {
	"todoTODO": "todoTODO",
}

response = self.schema.execute(
	query,
	variables=variables,
	context_value=self.context_value,
)

self.assertIsNone(response.errors)
self.assertTrue(response.data["todoTODO"]["ok"])
endsnippet
