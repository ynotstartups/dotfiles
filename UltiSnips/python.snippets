priority -50

#################
# python script #
#################

snippet shebang "#!/usr/bin/env python3" b
#!/usr/bin/env python3
$0
endsnippet

snippet script "complete python script with shebang and main function" b
#!/usr/bin/env python
"""
${1:${VISUAL:TODO module docs}}
"""

def main():
	pass

if __name__ == "__main__":
    main()
endsnippet

######################
# Assertions & Tests #
######################

snippet ae "Assert equal" b
self.assertEqual(${1:${VISUAL:first}}, ${2:second})
endsnippet

snippet at "Assert True" b
self.assertTrue(${1:${VISUAL:expression}})
endsnippet

snippet af "Assert False" b
self.assertFalse(${1:${VISUAL:expression}})
endsnippet

snippet an "Assert is None" b
self.assertIsNone(${1:${VISUAL:expression}})
endsnippet

snippet ann "Assert is not None" b
self.assertIsNotNone(${1:${VISUAL:expression}})
endsnippet

snippet classtd "django test class new file" b
from django.test import TestCase

class Test${1:Class}(TestCase):
	def test_${2:name}(self):
		${3:${VISUAL:pass}}

endsnippet

snippet classtdg "django graphql test new file" b
from oneview.tests.graphql import AdminUserMixin, GraphqlTestCase
from oneview.tests.model_mocks import TodoFactory

class Test${1:Class}(AdminUserMixin, GraphqlTestCase):
	def test_${2:name}(self):
		query = """
			mutation fooBar(
				$todoTodo: ID!,
				$todoTodo: Decimal!,
			) {
				todoTodo(
					todoTodo: $todoTodo,
					todoTodo: $todoTodo,
				) {
					ok
					errors
				}
			}
		"""

		variables = {
			"todoTodo": "todo",
			"todoTodo": "todo",
		}

		response = self.schema.execute(
			query,
			variables=variables,
			context_value=self.admin_context,
		)

		self.assertFalse(response.errors)

endsnippet

snippet classt "python unittest test class new file" b
from unittest import TestCase

class Test${1:Class}(TestCase):
    def test_${2:name}(self):
		${3:${VISUAL:pass}}

endsnippet

snippet subtest "python unittest subtest" b
for a, b in (("foo", "bar"), ("baz", "bazz")):
	with self.subTest(a=a, b=b):
		self.assertEqual(...)
endsnippet

snippet testdata "python unittest test data class method" b
	@classmethod
	def setUpTestData(cls):
	    pass
endsnippet

snippet logger_test "testing logger with python unittest" b
with self.assertLogs("foo.foo.foo", level="INFO") as logger_context_manager:
    # TODO

self.assertEqual(
	logger_context_manager.output,
	[
	    "INFO:foo.foo.foo:logger message"
	]
)
endsnippet

snippet error_raised_test "testing error with python unittest" b
with self.assertRaises("TODO_SOME_ERROR") as error_context_manager:
	function_that_raises_error()

self.assertTrue('This is broken' in str(error_context_manager.exception))
endsnippet

snippet error_raised_test_message "testing error message with django unittest" b
with self.assertRaisesMessage(ValueError, "invalid literal for int()"):
    pass
endsnippet

#########
# Print #
#########

snippet '([\w.]*)[.]~' "print with padding ~~~" r
`!p snip.rv = f" {match.group(1)} ".center(60, "~")`
endsnippet

###########
# Logging #
###########

snippet logger "from typing import List" b
import logging

_logger = logging.getLogger(__name__)
endsnippet


snippet requests "raise_for_status and logger exception" b
response = requests.post(url, headers=headers, data=json.dumps(data))
try:
	response.raise_for_status()
except (HTTPError, Timeout) as error:
	_logger.exception(error)
	return UploadDocumentToReportPack(
		errors=[f"Error uploading file. Error: {str(error)}"],
		ok=False,
	)
endsnippet
