priority -50

#################
# python script #
#################

snippet shebang "#!/usr/bin/env python3" b
#!/usr/bin/env python3
$0
endsnippet

snippet script "complete python script with shebang and main function" b
#!/usr/bin/env python
"""
${1:${VISUAL:TODO module docs}}
"""

def main():
	pass

if __name__ == "__main__":
    main()
endsnippet

######################
# Assertions & Tests #
######################

snippet ae "Assert equal" b
self.assertEqual(${1:${VISUAL:first}}, ${2:second})
endsnippet

snippet at "Assert True" b
self.assertTrue(${1:${VISUAL:expression}})
endsnippet

snippet af "Assert False" b
self.assertFalse(${1:${VISUAL:expression}})
endsnippet

snippet an "Assert is None" b
self.assertIsNone(${1:${VISUAL:expression}})
endsnippet

snippet ann "Assert is not None" b
self.assertIsNotNone(${1:${VISUAL:expression}})
endsnippet

snippet classtd "django test class new file" b
from django.test import TestCase

class Test${1:Class}(TestCase):
	def test_${2:name}(self):
		${3:${VISUAL:pass}}

endsnippet

snippet classtdg "django graphql test new file" b
from oneview.tests.graphql import GraphqlTestCase
from oneview.tests.model_mocks import TodoFactory

class Test${1:Class}(GraphqlTestCase):
	def test_${2:name}(self):
		${3:${VISUAL:pass}}

endsnippet

snippet classt "python unittest test class new file" b
from unittest import TestCase

class Test${1:Class}(TestCase):
    def test_${2:name}(self):
		${3:${VISUAL:pass}}

endsnippet

snippet subtest "python unittest subtest" b
for a, b in (("foo", "bar"), ("baz", "bazz")):
	with self.subTest(a=a, b=b):
		self.assertEqual(...)
endsnippet

snippet enum "enum"
class TODO(Enum):
    TODO = 1
endsnippet

#################
# Documentation #
#################

snippet " "triple quoted string (double quotes)" b
"""
${1:${VISUAL:TODO}}
""
endsnippet

snippet doc "triple quoted string (double quotes)" b
"""
${1:${VISUAL:TODO describe what does this function do in a high level}}

:param TODO: 

:return: TODO 
"""
endsnippet

#########
# Print #
#########

snippet "([\w.]*)[.]F" "print variable with f string = in color cyan" r
`!p snip.rv = 'f"\\033[36m{' +  match.group(1) + '=}\\033[0m"'`
endsnippet

snippet '([\w.]*)[.]~' "print with padding ~~~" r
`!p snip.rv = f" {match.group(1)} ".center(60, "~")`
endsnippet

###########
# Logging #
###########

snippet logger "from typing import List" b
import logging

_logger = logging.getLogger(__name__)
endsnippet

snippet logger_test "testing logger with python unittest" b
with self.assertLogs("foo.foo.foo", level="INFO") as logger_context_manager:
    # TODO

self.assertEqual(
	logger_context_manager.output,
	[
	    "INFO:foo.foo.foo:logger message"
	]
)
endsnippet

snippet error_raised_test "testing logger with python unittest" b
with self.assertRaises("TODO_SOME_ERROR") as error_context_manager:
	function_that_raises_error()

self.assertTrue('This is broken' in str(error_context_manager.exception))
endsnippet

############
# graphene #
############

snippet graphene_mutation_test "graphene_mutation_test" b
query = """
	mutation fooBar(
		$todoTodo: ID!,
		$todoTodo: Decimal!,
	) {
		todoTodo(
			todoTodo: $todoTodo,
			todoTodo: $todoTodo,
		) {
			ok
			errors
		}
	}
"""

variables = {
	"todoTodo": "todo",
	"todoTodo": "todo",
}

response = self.schema.execute(
	query,
	variables=variables,
	context_value=self.context_value,
)

self.assertFalse(response.errors)
endsnippet

snippet graphene_query_test "graphene_mutation_test" b
query = """
	query todoTODO(
		$todoTODO: ID!,
	) {
		todoTODO(
			todoTODO: $todoTODO,
		) {
			ok
			errors
		}
	}
"""

variables = {
	"todoTODO": "todoTODO",
}

response = self.schema.execute(
	query,
	variables=variables,
	context_value=self.context_value,
)

self.assertFalse(response.errors)
self.assertTrue(response.data["todoTODO"]["ok"])
endsnippet
